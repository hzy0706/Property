<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.trkj.property.dao.toll.ChargeCostsDao">
  <resultMap id="BaseResultMap" type="com.trkj.property.entity.toll.ChargeCostsEntity">
    <id column="charge_costs_id" jdbcType="INTEGER" property="chargeCostsId" />
    <result column="cost_money" jdbcType="DECIMAL" property="costMoney" />
    <result column="charge_cost_assessment" jdbcType="DECIMAL" property="chargeCostAssessment" />
    <result column="overduefine_money" jdbcType="DECIMAL" property="overduefineMoney" />
    <result column="break_money" jdbcType="DECIMAL" property="breakMoney" />
    <result column="charge_time" jdbcType="TIMESTAMP" property="chargeTime" />
    <result column="overdue_time" jdbcType="TIMESTAMP" property="overdueTime" />
    <result column="ischarge" jdbcType="INTEGER" property="ischarge" />
    <result column="charge_costs_begintime" jdbcType="TIMESTAMP" property="chargeCostsBegintime" />
    <result column="charge_costs_endtime" jdbcType="TIMESTAMP" property="chargeCostsEndtime" />
  </resultMap>
  <sql id="Base_Column_List">
    charge_costs_id, cost_money, charge_cost_assessment, overduefine_money, break_money, 
    charge_time, overdue_time, ischarge, charge_costs_begintime, charge_costs_endtime
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_charge_costs
    where charge_costs_id = #{chargeCostsId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_charge_costs
    where charge_costs_id = #{chargeCostsId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="charge_costs_id" keyProperty="chargeCostsId" parameterType="com.trkj.property.entity.toll.ChargeCostsEntity" useGeneratedKeys="true">
    insert into t_charge_costs (cost_money, charge_cost_assessment, 
      overduefine_money, break_money, charge_time, 
      overdue_time, ischarge, charge_costs_begintime, 
      charge_costs_endtime)
    values (#{costMoney,jdbcType=DECIMAL}, #{chargeCostAssessment,jdbcType=DECIMAL}, 
      #{overduefineMoney,jdbcType=DECIMAL}, #{breakMoney,jdbcType=DECIMAL}, #{chargeTime,jdbcType=TIMESTAMP}, 
      #{overdueTime,jdbcType=TIMESTAMP}, #{ischarge,jdbcType=INTEGER}, #{chargeCostsBegintime,jdbcType=TIMESTAMP}, 
      #{chargeCostsEndtime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" keyColumn="charge_costs_id" keyProperty="chargeCostsId" parameterType="com.trkj.property.entity.toll.ChargeCostsEntity" useGeneratedKeys="true">
    insert into t_charge_costs
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="costMoney != null">
        cost_money,
      </if>
      <if test="chargeCostAssessment != null">
        charge_cost_assessment,
      </if>
      <if test="overduefineMoney != null">
        overduefine_money,
      </if>
      <if test="breakMoney != null">
        break_money,
      </if>
      <if test="chargeTime != null">
        charge_time,
      </if>
      <if test="overdueTime != null">
        overdue_time,
      </if>
      <if test="ischarge != null">
        ischarge,
      </if>
      <if test="chargeCostsBegintime != null">
        charge_costs_begintime,
      </if>
      <if test="chargeCostsEndtime != null">
        charge_costs_endtime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="costMoney != null">
        #{costMoney,jdbcType=DECIMAL},
      </if>
      <if test="chargeCostAssessment != null">
        #{chargeCostAssessment,jdbcType=DECIMAL},
      </if>
      <if test="overduefineMoney != null">
        #{overduefineMoney,jdbcType=DECIMAL},
      </if>
      <if test="breakMoney != null">
        #{breakMoney,jdbcType=DECIMAL},
      </if>
      <if test="chargeTime != null">
        #{chargeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="overdueTime != null">
        #{overdueTime,jdbcType=TIMESTAMP},
      </if>
      <if test="ischarge != null">
        #{ischarge,jdbcType=INTEGER},
      </if>
      <if test="chargeCostsBegintime != null">
        #{chargeCostsBegintime,jdbcType=TIMESTAMP},
      </if>
      <if test="chargeCostsEndtime != null">
        #{chargeCostsEndtime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.trkj.property.entity.toll.ChargeCostsEntity">
    update t_charge_costs
    <set>
      <if test="costMoney != null">
        cost_money = #{costMoney,jdbcType=DECIMAL},
      </if>
      <if test="chargeCostAssessment != null">
        charge_cost_assessment = #{chargeCostAssessment,jdbcType=DECIMAL},
      </if>
      <if test="overduefineMoney != null">
        overduefine_money = #{overduefineMoney,jdbcType=DECIMAL},
      </if>
      <if test="breakMoney != null">
        break_money = #{breakMoney,jdbcType=DECIMAL},
      </if>
      <if test="chargeTime != null">
        charge_time = #{chargeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="overdueTime != null">
        overdue_time = #{overdueTime,jdbcType=TIMESTAMP},
      </if>
      <if test="ischarge != null">
        ischarge = #{ischarge,jdbcType=INTEGER},
      </if>
      <if test="chargeCostsBegintime != null">
        charge_costs_begintime = #{chargeCostsBegintime,jdbcType=TIMESTAMP},
      </if>
      <if test="chargeCostsEndtime != null">
        charge_costs_endtime = #{chargeCostsEndtime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where charge_costs_id = #{chargeCostsId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.trkj.property.entity.toll.ChargeCostsEntity">
    update t_charge_costs
    set cost_money = #{costMoney,jdbcType=DECIMAL},
      charge_cost_assessment = #{chargeCostAssessment,jdbcType=DECIMAL},
      overduefine_money = #{overduefineMoney,jdbcType=DECIMAL},
      break_money = #{breakMoney,jdbcType=DECIMAL},
      charge_time = #{chargeTime,jdbcType=TIMESTAMP},
      overdue_time = #{overdueTime,jdbcType=TIMESTAMP},
      ischarge = #{ischarge,jdbcType=INTEGER},
      charge_costs_begintime = #{chargeCostsBegintime,jdbcType=TIMESTAMP},
      charge_costs_endtime = #{chargeCostsEndtime,jdbcType=TIMESTAMP}
    where charge_costs_id = #{chargeCostsId,jdbcType=INTEGER}
  </update>
</mapper>